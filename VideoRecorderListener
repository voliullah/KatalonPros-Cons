import com.kms.katalon.core.annotation.BeforeTestCase
import com.kms.katalon.core.annotation.AfterTestCase
import com.kms.katalon.core.context.TestCaseContext
import com.kms.katalon.core.annotation.AfterTestSuite
import com.kms.katalon.core.configuration.RunConfiguration
import com.kms.katalon.core.util.KeywordUtil

import org.monte.media.Format
import org.monte.media.math.Rational
import static org.monte.media.FormatKeys.*
import static org.monte.media.VideoFormatKeys.*

import org.monte.screenrecorder.ScreenRecorder

import java.awt.*
import java.nio.file.Paths

class VideoRecorderListener {

    private ScreenRecorder screenRecorder
    private String videoFileName = ""
    private String videoDirectoryPath = RunConfiguration.getProjectDir() + "/Videos"

    @BeforeTestCase
    def beforeTestCase(TestCaseContext testCaseContext) {
        // Ensure video folder exists
        File videoDir = new File(videoDirectoryPath)
        if (!videoDir.exists()) {
            videoDir.mkdirs()
        }

        // Set the video file name
        videoFileName = testCaseContext.getTestCaseId().replaceAll("[^a-zA-Z0-9]", "_") + "_" + System.currentTimeMillis()

        // Prepare screen recording
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize()
        Rectangle captureSize = new Rectangle(0, 0, screenSize.width, screenSize.height)

        GraphicsConfiguration gc = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration()

        screenRecorder = new ScreenRecorder(gc, captureSize,
                new Format(MediaTypeKey, MediaType.FILE, MimeTypeKey, MIME_AVI),
                new Format(MediaTypeKey, MediaType.VIDEO, EncodingKey, ENCODING_AVI_TECHSMITH_SCREEN_CAPTURE,
                        CompressorNameKey, ENCODING_AVI_TECHSMITH_SCREEN_CAPTURE,
                        DepthKey, 24, FrameRateKey, Rational.valueOf(15),
                        QualityKey, 1.0f,
                        KeyFrameIntervalKey, 15 * 60),
                new Format(MediaTypeKey, MediaType.VIDEO, EncodingKey, "black",
                        FrameRateKey, Rational.valueOf(30)),
                null,
                videoDir,
                videoFileName)

        screenRecorder.start()
    }

    @AfterTestCase
    def afterTestCase(TestCaseContext testCaseContext) {
        screenRecorder.stop()

        if (testCaseContext.getTestCaseStatus() != 'FAILED') {
            // Delete the video if test passed
            File video = new File(videoDirectoryPath + "/" + videoFileName + ".avi")
            if (video.exists()) {
                video.delete()
            }
        } else {
            // Print video path if test failed
            KeywordUtil.logInfo("ðŸ›‘ Test Failed! Video saved at: ${Paths.get(videoDirectoryPath, videoFileName + ".avi")}")
        }
    }

    @AfterTestSuite
    def afterTestSuite() {
        KeywordUtil.logInfo("âœ… Video recordings (if any) are located at: ${videoDirectoryPath}")
    }
}
